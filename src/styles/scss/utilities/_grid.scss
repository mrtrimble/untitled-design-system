@use 'sass:map';
@use '../tokens/tokens' as tokens;

$GRID: (
  MAX_COLUMNS: 12,
  BREAKPOINTS: (
    'mobile': '640px',
    'tablet': '768px',
    'lg-tablet': '1024px',
    'laptop': '1240px',
  ),
  SPACERS: (
    '2xs': #{tokens.$utility-spacer-2xs},
    'xs': #{tokens.$utility-spacer-xs},
    'sm': #{tokens.$utility-spacer-sm},
    'md': #{tokens.$utility-spacer-md},
    'lg': #{tokens.$utility-spacer-lg},
    'xl': #{tokens.$utility-spacer-xl},
    '2xl': #{tokens.$utility-spacer-2xl},
    '3xl': #{tokens.$utility-spacer-3xl},
  ),
) !default;

// Default Grid styles
@layer utilities {
  .grid {
    --_columns: var(--grid-columns, 1);
    --_column-gap: var(--grid-column-gap, 0);
    --_column-span: var(--grid-column-span);
    --_row-gap: var(--grid-row-gap, 0);

    --_gap: var(--grid-gap, var(--_row-gap) var(--_column-gap));

    container-name: grid-container;
    container-type: inline-size;
    display: block grid;
    grid-template-columns: repeat(var(--_columns), 1fr);
    gap: var(--_gap);
  }

  // Non-responsive Columns
  @for $i from 1 through map.get($GRID, MAX_COLUMNS) {
    .grid-#{$i} {
      --grid-columns: #{$i};
    }
  }

  @each $breakpoint, $value in map.get($GRID, BREAKPOINTS) {
    @media (min-width: $value) {
      @for $i from 1 through map.get($GRID, MAX_COLUMNS) {
        .grid-#{$i}\:#{$breakpoint} {
          --grid-columns: #{$i};
        }
      }
    }
  }

  [class^='block'] {
    grid-column: span var(--grid-column-span, var(--_column-span));
  }

  @for $i from 1 through map.get($GRID, MAX_COLUMNS) {
    .block-#{$i} {
      --grid-column-span: #{$i};
    }
  }

  @each $breakpoint, $value in map.get($GRID, BREAKPOINTS) {
    @media (min-width: #{$value}) {
      @for $i from 1 through map.get($GRID, MAX_COLUMNS) {
        .block-#{$i}\:#{$breakpoint} {
          --grid-column-span: #{$i};
        }
      }
    }
  }

  // Gap styles

  // Non-responsive Gap Sizes
  @each $spacer, $value in map.get($GRID, SPACERS) {
    .gap-#{$spacer} {
      --grid-gap: #{$value};
    }

    .gap-row-#{$spacer} {
      --grid-row-gap: #{$value};
    }

    .gap-column-#{$spacer} {
      --grid-row-gap: #{$value};
    }
  }

  .auto-grid {
    --_min: var(--grid-column-min, 15ch);

    display: grid;
    grid-gap: var(--grid-gap);
    grid-template-columns: repeat(auto-fit, minmax(min(100%, var(--_min)), 1fr));
  }

  .grid-stack {
    grid-template-areas: 'stack';
    > * {
      grid-area: stack;
    }
  }

  .grid-center {
    display: grid;
    place-content: center;
  }

  .grid-align-center {
    display: grid;
    align-items: center;
  }

  .grid-justify-center {
    display: grid;
    justify-content: center;
  }
}
