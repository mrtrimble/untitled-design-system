@use 'sass:meta';
@use 'sass:map';
@use '../tokens/tokens';

$TOKENS: meta.module-variables('tokens');

@layer components {
  *:has(> .button) {
    --container-name: button;
  }

  button:not(.tab),
  .button {
    --_background-color: var(--button-background-color, #{map.get($TOKENS, button-background-color)});
    --_border-color: var(--button-border-color, #{map.get($TOKENS, button-border-color)});
    --_border-width: var(--button-border-width, #{map.get($TOKENS, button-border-width)});
    --_border-style: var(--button-border-style, #{map.get($TOKENS, button-border-style)});
    --_border-radius: var(--button-border-radius, #{map.get($TOKENS, button-border-radius)});
    --_font-size: var(--button-font-size, #{map.get($TOKENS, button-font-size)});
    --_text-color: var(--button-text-color, #{map.get($TOKENS, button-border-color)});
    --_outline-color: var(--button-outline-color, #{map.get($TOKENS, button-outline-color)});
    --_outline-style: var(--button-outline-style, #{map.get($TOKENS, button-outline-style)});
    --_outline-width: var(--button-outline-width, #{map.get($TOKENS, button-outline-width)});
    --_outline-offset: var(--button-outline-offset, #{map.get($TOKENS, button-outline-offset)});
    --_padding-x: var(--button-padding-inline, #{map.get($TOKENS, button-padding-inline)});
    --_padding-y: var(--button-padding-block, #{map.get($TOKENS, button-padding-block)});
    --_text-decoration: var(--button-text-decoration, #{map.get($TOKENS, button-text-decoration)});
    --_width: var(--button-width, #{map.get($TOKENS, button-width)});

    @layer rules {
      background: var(--_background-color);
      border-color: var(--_border-color);
      border-radius: var(--_border-radius);
      border-style: var(--_border-style);
      border-width: var(--_border-width);
      color: var(--_text-color);
      display: inline-grid;
      font-size: var(--_font-size);
      padding-block: var(--_padding-y);
      padding-inline: var(--_padding-x);
      place-content: center;
      text-decoration: var(--_text-decoration);
      transition-duration: 0.2s;
      transition-property: background, outline, color;
      transition-timing-function: ease;
      outline: var(--_outline-width) var(--_outline-style) var(--_outline-color);
      outline-offset: var(--_outline-offset);
      text-align: center;
      width: var(--_width);
    }

    @layer modifiers {
      &.secondary {
        --button-background-color: var(--grayscale-white);
        --button-border-color: var(--grayscale-light);
        --button-border-width: 3px;

        &:hover {
          --button-background-color: var(--grayscale-lighter);
        }

        &:active,
        &:focus-visible {
          --button-outline-color: canvastext;
        }
      }
      &.plain {
        --button-background-color: transparent;
        --button-border-color: transparent;
        --button-text-decoration: underline;
        --button-text-color: canvastext;
        --button-padding-inline: var(--spacer-none);
        --button-padding-block: var(--spacer-none);

        &:active,
        &:focus,
        &:focus-visible {
          --button-outline-color: var(--grayscale-black);
          --button-text-color: var(--color-base);
        }
      }
    }

    @layer states {
      &:hover {
        --button-background-color: var(--swatch-orange);
      }

      &:active,
      &:focus-visible {
        --button-outline-color: canvastext;
      }

      @container button (max-width: 320px) {
        --button-background-color: var(--message-success);
      }
    }

    @layer themes {
      @media (prefers-color-scheme: dark) {
        &.plain {
          &:active,
          &:focus,
          &:focus-visible {
            --button-outline-color: var(--grayscale-white);
            --button-text-color: canvasText;
          }
        }
      }
    }
  }
}
